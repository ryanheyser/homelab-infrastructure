- name: Check for kubeconfig
  delegate_to: localhost
  run_once: true
  ansible.builtin.stat:
    path: "{{ home }}/.kube/config"
  register: kubeconfig
- name: Stat age.key
  ansible.builtin.stat:
    path: "{{ home }}/.config/sops/age/keys.txt"
  register: age_key_file
- name: Fail if Age Keyfile does not exist
  ansible.builtin.fail:
    message: "{{ home }}/.config/sops/age/keys.txt does not exist"
  when: not age_key_file.stat.exists
- name: Get Age Public Key
  ansible.builtin.command: |
    grep -Po '(?<=public key: ).*' {{ home }}/.config/sops/age/keys.txt
  register: age_public_key
  when: age_key_file.stat.exists
  changed_when: true
- name: Debug Age Public Key
  ansible.builtin.debug:
    msg: "age public key: \"{{ age_public_key.stdout }}\""
- name: Check for vault initial secrets encrypted file
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ playbook_dir + '/secrets/vault-initial-secrets.sops.yaml.enc' }}"
  register: vaultinitialsecretsfile
- name: Unencrypt Vault Initial Secrets
  delegate_to: localhost
  ansible.builtin.set_fact:
    vaultinitial: "{{ lookup('file', playbook_dir + '/secrets/vault-initial-secrets.sops.yaml.enc') | community.sops.decrypt | ansible.builtin.from_yaml }}"
  when: vaultinitialsecretsfile.stat.exists
  failed_when: not vaultinitialsecretsfile.stat.exists
- name: Enable kvv2 secret store
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault secrets enable -path=/secret -version=2 kv"
  when: >-
    kubeconfig.stat.exists
  register: vaultinitialsecretstoreinit
  failed_when: |-
    vaultinitialsecretstoreinit.rc == 1 or vaultinitialsecretstoreinit.rc > 2
# - name: Debug
#   delegate_to: localhost
#   ansible.builtin.debug:
#     msg: "{{ (vaultinitial | ansible.builtin.from_yaml).cert_manager_system_cloudflare_api_key }}"
#   changed_when: true
- name: Create Cert Manager Cloudflare Api Key Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret cloudflare-api-key api-key={{ (vaultinitial | ansible.builtin.from_yaml).cert_manager_system_cloudflare_api_key }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
- name: Create Calibre Credentials Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret calibreCredentials calibreUser={{ (vaultinitial | ansible.builtin.from_yaml).default_calibre_calibreUser }} calibrePassword={{ (vaultinitial | ansible.builtin.from_yaml).default_calibre_calibrePassword }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
- name: Create Vaultwarden admin token Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret vaultwarden-admin-token admin-token={{ (vaultinitial | ansible.builtin.from_yaml).default_vaultwarden_vaultwardenAdminToken_adminToken }} installation-id={{ (vaultinitial | ansible.builtin.from_yaml).default_vaultwarden_vaultwardenAdminToken_installationId }} installation-key={{ (vaultinitial | ansible.builtin.from_yaml).default_vaultwarden_vaultwardenAdminToken_installationKey }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
- name: Create Authentik Credentials Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret authentik-credentials adminPassword={{ (vaultinitial | ansible.builtin.from_yaml).network_system_authentik_authentikCredentials_adminPassword }} userPassword={{ (vaultinitial | ansible.builtin.from_yaml).network_system_authentik_authentikCredentials_userPassword }} replicationPassword={{ (vaultinitial | ansible.builtin.from_yaml).network_system_authentik_authentikCredentials_replicationPassword }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
- name: Create Authentik Secret Key Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret authentik-secret-key authentik-secret-key={{ (vaultinitial | ansible.builtin.from_yaml).network_system_authentik_authentikSecretKey }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
- name: Create Cloudflare Zone ID Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret cloudflare-zone-id zone-id={{ (vaultinitial | ansible.builtin.from_yaml).network_system_cloudflare_ddns_cloudflare_zoneid }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
- name: Create Cloudflare Record ID Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret cloudflare-record-id heyser-xyz={{ (vaultinitial | ansible.builtin.from_yaml).network_system_cloudflare_ddns_cloudflare_recordid_heyser_xyz }} wildcard-heyser-xyz={{ (vaultinitial | ansible.builtin.from_yaml).network_system_cloudflare_ddns_cloudflare_recordid_wildcard_heyser_xyz }} wildcard-homelab-heyser-xyz={{ (vaultinitial | ansible.builtin.from_yaml).network_system_cloudflare_ddns_cloudflare_recordid_wildcard_homelab_heyser_xyz }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
- name: Create Cloudflare Auth Key Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret cloudflare-auth-key auth-key={{ (vaultinitial | ansible.builtin.from_yaml).network_system_cloudflare_ddns_cloudflare_authkey }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
- name: Create Tailscale Credentials Secret
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault kv put -mount=secret tailscale-client-credentials client-id={{ (vaultinitial | ansible.builtin.from_yaml).network_system_tailscale_tailscaleClientCredentials_client_id }} client-secret={{ (vaultinitial | ansible.builtin.from_yaml).network_system_tailscale_tailscaleClientCredentials_client_secret }}"
  when: >-
    kubeconfig.stat.exists and
    vaultinitialsecretstoreinit is success
