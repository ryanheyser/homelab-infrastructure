- name: Check docker secrets encrypted file
  ansible.builtin.stat:
    path: "{{ playbook_dir + '/secrets/docker.sops.yaml.enc' }}"
  register: dockersecretsfile
- name: Unencrypt Docker Secrets
  ansible.builtin.set_fact:
    docker: "{{ lookup('file', playbook_dir + '/secrets/docker.sops.yaml.enc') | community.sops.decrypt | ansible.builtin.from_yaml }}"
  when: dockersecretsfile.stat.exists
  failed_when: not dockersecretsfile.stat.exists
- name: Format docker config
  ansible.builtin.command: |
    echo -n '{"auths":{"https://index.docker.io/v1/":{"username":"{{ (docker | from_yaml).docker_user }}","email":"{{ (docker | from_yaml).docker_email }}","auth":"{{ (docker | from_yaml).docker_token }}"}}}'
  register: dockercfg
  changed_when: true
  failed_when:
    - dockercfg.rc != 0
    - dockercfg.stdout == ""
- name: Create Secret | docker-registry-credentials
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: docker-registry-credentials
        namespace: kube-system
        annotations:
          reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
          reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      type: kubernetes.io/dockercfg
      data:
        .dockercfg: "{{ dockercfg.stdout | b64encode }}"
- name: Create Secret | dockerhub-registrycreds
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: dockerhub-registrycreds
        namespace: kube-system
        annotations:
          reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
          reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      type: kubernetes.io/dockercfg
      data:
        .dockercfg: "{{ dockercfg.stdout | b64encode }}"
