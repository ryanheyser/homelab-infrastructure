- name: Check for kubeconfig
  ansible.builtin.stat:
    path: "{{ home }}/.kube/config"
  register: kubeconfig
- name: Add Metallb repository
  when: kubeconfig.stat.exists
  kubernetes.core.helm_repository:
    kubeconfig: "{{ home }}/.kube/config"
    name: metallb
    repo_url: https://metallb.github.io/metallb
- name: Create network-system namespace
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    name: network-system
    api_version: v1
    kind: Namespace
    state: present
    definition:
      metadata:
        annotations:
          # cni.projectcalico.org/ipv4pools: '["system"]'
          metallb.universe.tf/address-pool: "system"
        labels:
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/audit: privileged
          pod-security.kubernetes.io/warn: privileged
- name: Check for kubeconfig
  ansible.builtin.stat:
    path: "{{ home }}/.kube/config"
  register: kubeconfig
- name: Deploy Metallb chart
  when: kubeconfig.stat.exists
  kubernetes.core.helm:
    # renovate: registryUrl=https://metallb.github.io/metallb
    kubeconfig: "{{ home }}/.kube/config"
    name: metallb
    release_namespace: network-system
    chart_ref: metallb
    chart_version: 0.14.8
    chart_repo_url: https://metallb.github.io/metallb
    # values:
- name: Wait for metallb controller to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ home }}/.kube/config"
    kind: Deployment
    namespace: network-system
    label_selectors:
      - app.kubernetes.io/name = metallb
      - app.kubernetes.io/component = controller
    wait: true
    wait_condition:
      type: "Available"
      status: "True"
    wait_sleep: 30
    wait_timeout: 600
  register: metallbcontrollerstatus
  until: metallbcontrollerstatus.resources[0].status.readyReplicas | int > 0
  retries: 20
  delay: 15
- name: Create Default IPAddressPool Config
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    state: present
    # apply: true
    # server_side_apply:
    #   field_manager: ansible
    definition:
      apiVersion: metallb.io/v1beta1
      kind: IPAddressPool
      metadata:
        name: default
        namespace: network-system
      spec:
        addresses:
          - 10.0.101.0/24
- name: Create System IPAddressPool Config
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    state: present
    # apply: true
    # server_side_apply:
    #   field_manager: ansible
    definition:
      apiVersion: metallb.io/v1beta1
      kind: IPAddressPool
      metadata:
        name: system
        namespace: network-system
      spec:
        addresses:
          - 10.0.100.0/24
- name: Create Coredns IP Reservation
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    state: present
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
    definition:
      apiVersion: projectcalico.org/v3
      kind: IPReservation
      metadata:
        name: coredns-ipv4-reservation
        namespace: kube-system
      spec:
        reservedCIDRs:
          - 10.0.100.2
- name: Create Coredns LoadBalancer
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    api_version: v1
    kind: Service
    name: rke2-coredns-rke2-coredns-lb
    namespace: kube-system
    state: present
    # apply: true
    # server_side_apply:
    #   field_manager: ansible
    definition:
      metadata:
        annotations:
          metallb.universe.tf/allow-shared-ip: coredns
          metallb.universe.tf/address-pool: system
      spec:
        selector:
          app.kubernetes.io/instance: rke2-coredns
          app.kubernetes.io/name: rke2-coredns
          k8s-app: kube-dns
        ports:
          - name: udp-53
            port: 53
            protocol: UDP
            targetPort: 53
          - name: tcp-53
            port: 53
            protocol: TCP
            targetPort: 53
        externalTrafficPolicy: Cluster
        loadBalancerIP: 10.0.100.2
        type: LoadBalancer
