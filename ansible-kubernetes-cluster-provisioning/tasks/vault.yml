- name: Check for kubeconfig
  delegate_to: localhost
  run_once: true
  ansible.builtin.stat:
    path: "{{ home }}/.kube/config"
  register: kubeconfig
- name: Stat age.key
  ansible.builtin.stat:
    path: "{{ home }}/.config/sops/age/keys.txt"
  register: age_key_file
- name: Fail if Age Keyfile does not exist
  ansible.builtin.fail:
    message: "{{ home }}/.config/sops/age/keys.txt does not exist"
  when: not age_key_file.stat.exists
- name: Get Age Public Key
  ansible.builtin.command: |
    grep -Po '(?<=public key: ).*' {{ home }}/.config/sops/age/keys.txt
  register: age_public_key
  when: age_key_file.stat.exists
  changed_when: true
- name: Debug Age Public Key
  ansible.builtin.debug:
    msg: "age public key: \"{{ age_public_key.stdout }}\""
- name: Add hashicorp repository
  when: kubeconfig.stat.exists
  kubernetes.core.helm_repository:
    kubeconfig: "{{ home }}/.kube/config"
    name: hashicorp
    repo_url: https://helm.releases.hashicorp.com
- name: Add secrets-store-csi repository
  when: kubeconfig.stat.exists
  kubernetes.core.helm_repository:
    kubeconfig: "{{ home }}/.kube/config"
    name: secrets-store-csi-driver
    repo_url: https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
- name: Create vault-system namespace
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    name: vault-system
    api_version: v1
    kind: Namespace
    state: present
    definition:
      metadata:
        annotations:
          # cni.projectcalico.org/ipv4pools: '["system"]'
          metallb.universe.tf/address-pool: "system"
        labels:
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/audit: privileged
          pod-security.kubernetes.io/warn: privileged
- name: Stat rumblpak.asc
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/secrets/rumblpak.asc"
  register: rumblpak_pgp_key_file
- name: Fail if rumblpak.asc does not exist
  ansible.builtin.fail:
    message: "{{ playbook_dir }}/secrets/rumblpak.asc does not exist"
  when: not rumblpak_pgp_key_file.stat.exists
- name: Stat rheyser.asc
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/secrets/rheyser.asc"
  register: rheyser_pgp_key_file
- name: Fail if rheyser.asc does not exist
  ansible.builtin.fail:
    message: "{{ playbook_dir }}/secrets/rheyser.asc does not exist"
  when: not rheyser_pgp_key_file.stat.exists
- name: Create pgp-keys configmap
  when: >-
    kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    name: vault-pgp-key
    api_version: v1
    kind: ConfigMap
    state: present
    definition:
      metadata:
        name: vault-pgp-key
        namespace: vault-system
      data:
        rumblpak.asc: "{{ lookup('ansible.builtin.file', rumblpak_pgp_key_file.stat.path) }}"
        rheyser.asc: "{{ lookup('ansible.builtin.file', rheyser_pgp_key_file.stat.path) }}"
- name: Deploy vault chart
  when: kubeconfig.stat.exists
  kubernetes.core.helm:
    kubeconfig: "{{ home }}/.kube/config"
    name: vault
    release_namespace: vault-system
    # renovate: registryUrl=https://helm.releases.hashicorp.com
    chart_ref: vault
    chart_version: 0.29.1
    chart_repo_url: https://helm.releases.hashicorp.com
    values_files:
      - "{{ playbook_dir }}/helm_values/vault/values.yaml"
- name: Deploy csi-secrets-store chart
  when: kubeconfig.stat.exists
  kubernetes.core.helm:
    kubeconfig: "{{ home }}/.kube/config"
    name: csi-secrets-store
    release_namespace: kube-system
    # renovate: registryUrl=https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
    chart_ref: secrets-store-csi-driver
    chart_version: 1.4.7
    chart_repo_url: https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
    values_files:
      - "{{ playbook_dir }}/helm_values/vault/csivalues.yaml"
- name: Check if Vault Operator Init File Exists
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/secrets/vault-operator-init-secret.key"
  register: vault_operator_init_file
- name: Wait for vault-0 to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ home }}/.kube/config"
    kind: Pod
    namespace: vault-system
    label_selectors:
      - app.kubernetes.io/name = vault
      - apps.kubernetes.io/pod-index = "0"
    wait: true
    wait_condition:
      type: "PodScheduled"
      status: "True"
- name: Wait for vault-1 to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ home }}/.kube/config"
    kind: Pod
    namespace: vault-system
    label_selectors:
      - app.kubernetes.io/name = vault
      - apps.kubernetes.io/pod-index = "1"
    wait: true
    wait_condition:
      type: "PodScheduled"
      status: "True"
- name: Wait for vault-2 to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ home }}/.kube/config"
    kind: Pod
    namespace: vault-system
    label_selectors:
      - app.kubernetes.io/name = vault
      - apps.kubernetes.io/pod-index = "2"
    wait: true
    wait_condition:
      type: "PodScheduled"
      status: "True"
- name: Pause for Vault Stability
  ansible.builtin.pause:
    seconds: 30
- name: Initialize Vault
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: >-
      vault operator init -format=json -key-shares=2 -key-threshold=2 -pgp-keys="/vault/config/pgp-keys/rumblpak.asc,/vault/config/pgp-keys/rheyser.asc"
    # command: vault operator init
  register: vault_operator_init
  ignore_unreachable: true
  when: >-
    (not vault_operator_init_file.stat.exists) and
    kubeconfig.stat.exists
- name: Pause for Vault Stability
  ansible.builtin.pause:
    seconds: 30
  when: not vault_operator_init is skipped
- name: Write Vault Configuration to File
  vars:
    username: "{{ lookup('ansible.builtin.env', 'USER') }}"
  ansible.builtin.copy:
    content: "{{ vault_operator_init.stdout }}"
    dest: "{{ playbook_dir }}/secrets/vault-operator-init-secret.key"
    mode: preserve
    owner: "{{ username }}"
    group: "{{ username }}"
  when: >-
    vault_operator_init is defined and
    (not vault_operator_init is skipped)
  register: vault_operator_init_config
- name: Write Vault Configuration to Encrypted File
  become: false
  community.sops.sops_encrypt:
    content_json: "{{ vault_operator_init }}"
    path: "{{ playbook_dir }}/secrets/vault-operator-init-secret.key.enc"
    age: "{{ age_public_key.stdout }}"
  when: >-
    vault_operator_init_config is defined and
    (not vault_operator_init_config is skipped)
- name: Read Vault Configuration from File
  become: true
  ansible.builtin.set_fact:
    vault_operator_init: "{{ lookup('file', playbook_dir + '/secrets/vault-operator-init-secret.key') }}"
- name: Check Vault Status
  when: kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: vault status -format=json
  register: vault_status
  ignore_unreachable: true
  failed_when: vault_status.rc > 2
- name: Debug
  ansible.builtin.debug:
    msg: "{{ ( vault_operator_init ) }}"
- name: Debug
  ansible.builtin.debug:
    msg: "{{ ( vault_status ) }}"
- name: Debug
  ansible.builtin.debug:
    msg: "echo {{ (vault_operator_init.unseal_keys_b64[0]) }} | base64 -d | gpg -dq"
- name: Debug
  ansible.builtin.debug:
    msg: "echo {{ (vault_operator_init.unseal_keys_b64[1]) }} | base64 -d | gpg -dq"
- name: Decode unseal_keys_b64[0]
  become: false
  ansible.builtin.shell:
    cmd: "echo {{ (vault_operator_init.unseal_keys_b64[0]) }} | base64 -d | gpg -dq"
  args:
    executable: /usr/bin/bash
  register: unseal_keys_b64_0
  changed_when: true
- name: Debug Decode unseal_keys_b64[0]
  ansible.builtin.debug:
    msg: "{{ ( unseal_keys_b64_0.stdout ) }}"
- name: Decode unseal_keys_b64[1]
  become: false
  ansible.builtin.shell:
    cmd: "echo {{ (vault_operator_init.unseal_keys_b64[1]) }} | base64 -d | gpg -dq"
  args:
    executable: /usr/bin/bash
  register: unseal_keys_b64_1
  changed_when: true
- name: Debug Decode unseal_keys_b64[1]
  ansible.builtin.debug:
    msg: "{{ ( unseal_keys_b64_1.stdout ) }}"
- name: Unseal Vault 1
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: "vault operator unseal -format=json {{ unseal_keys_b64_0.stdout }}"
- name: Unseal Vault 2
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: "vault operator unseal -format=json {{ unseal_keys_b64_1.stdout }}"
- name: Check Vault Status Again
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: "vault status -format=json"
  register: vault_status_after_unseal
  ignore_unreachable: true
  # failed_when: (vault_status_after_unseal.stdout | from_json).sealed
  when: >-
    kubeconfig.stat.exists
- name: Debug vault_status_after_unseal
  ansible.builtin.debug:
    msg: "{{ vault_status_after_unseal }}"
- name: Fail vault status is sealed
  ansible.builtin.fail:
    message: "Vault is sealed"
  when: (vault_status_after_unseal.stdout | from_json).sealed
- name: Unseal Vault 1 - vault-1
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: "vault operator unseal -format=json {{ unseal_keys_b64_0.stdout }}"
- name: Unseal Vault 2 - vault-1
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: "vault operator unseal -format=json {{ unseal_keys_b64_1.stdout }}"
- name: Check Vault Status Again
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: "vault status -format=json"
  register: vault_status_after_unseal_1
  ignore_unreachable: true
  # failed_when: (vault_status_after_unseal.stdout | from_json).sealed
  when: >-
    kubeconfig.stat.exists
- name: Debug vault_status_after_unseal_1
  ansible.builtin.debug:
    msg: "{{ vault_status_after_unseal_1 }}"
- name: Fail vault status is sealed
  ansible.builtin.fail:
    message: "Vault is sealed"
  when: (vault_status_after_unseal_1.stdout | from_json).sealed
- name: Unseal Vault 1 - vault-2
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-2
    command: "vault operator unseal -format=json {{ unseal_keys_b64_0.stdout }}"
- name: Unseal Vault 2 - vault-2
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-2
    command: "vault operator unseal -format=json {{ unseal_keys_b64_1.stdout }}"
- name: Check Vault Status Again
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-2
    command: "vault status -format=json"
  register: vault_status_after_unseal_2
  ignore_unreachable: true
  # failed_when: (vault_status_after_unseal.stdout | from_json).sealed
  when: >-
    kubeconfig.stat.exists
- name: Debug vault_status_after_unseal_2
  ansible.builtin.debug:
    msg: "{{ vault_status_after_unseal_2 }}"
- name: Fail vault status is sealed
  ansible.builtin.fail:
    message: "Vault is sealed"
  when: (vault_status_after_unseal_2.stdout | from_json).sealed

# - name: Check if Vault Operator Root File Exists
#   ansible.builtin.stat:
#     path: "{{ playbook_dir }}/secrets/vault-operator-root-generate.key"
#   register: vault_operator_root_file
# - name: Initialize Vault Root Token
#   kubernetes.core.k8s_exec:
#     kubeconfig: "{{ home }}/.kube/config"
#     namespace: vault-system
#     pod: vault-0
#     command: "vault operator generate-root -init -format=json"
#   register: vault_operator_root
#   ignore_unreachable: true
#   when: >-
#     not vault_operator_root_file.stat.exists and
#     kubeconfig.stat.exists
# - name: Write Vault Root Generation to File
#   vars:
#     username: "{{ lookup('ansible.builtin.env', 'USER') }}"
#   ansible.builtin.copy:
#     content: "{{ vault_operator_root.stdout }}"
#     dest: "{{ playbook_dir }}/secrets/vault-operator-root-generate.key"
#     mode: preserve
#     owner: "{{ username }}"
#     group: "{{ username }}"
#   when: >-
#     vault_operator_root is defined and
#     not vault_operator_root is skipped
# - name: Read Vault Root Token from File
#   ansible.builtin.set_fact:
#     vault_operator_root: "{{ lookup('file', playbook_dir + '/secrets/vault-operator-root-generate.key') }}"
# - name: Debug Vault Operator Root 
#   ansible.builtin.debug:
#     msg: "{{ vault_operator_root }}"
# - name: Set Vault Root Token OTP
#   ansible.builtin.set_fact:
#     vault_operator_root_otp: "{{ vault_operator_root.otp }}"
#     vault_operator_root_nonce: "{{ vault_operator_root.nonce }}"
# - name: Debug Vault Operator Root otp
#   ansible.builtin.debug:
#     msg: "{{ vault_operator_root_otp }}"
# - name: Debug Vault Operator Root nonce
#   ansible.builtin.debug:
#     msg: "{{ vault_operator_root_nonce }}"
# - name: Debug Vault Operator Root cmd
#   ansible.builtin.debug:
#     msg: "vault operator generate-root -nonce={{ vault_operator_root_nonce }} -otp={{ vault_operator_root_otp }} -decode={{ unseal_keys_b64_0.stdout }} -format=json"
# - name: Generate Root Token 1
#   kubernetes.core.k8s_exec:
#     kubeconfig: "{{ home }}/.kube/config"
#     namespace: vault-system
#     pod: vault-0
#     command: >-
#       vault operator generate-root -nonce={{ vault_operator_root_nonce }} -otp={{ vault_operator_root_otp }} -decode={{ unseal_keys_b64_0.stdout }} -format=json
#   when: >-
#     vault_operator_root is defined and
#     vault_operator_init is defined and
#     not vault_operator_root.complete and
#     kubeconfig.stat.exists
#   register: vault_operator_root
# - name: Generate Root Token 2
#   kubernetes.core.k8s_exec:
#     kubeconfig: "{{ home }}/.kube/config"
#     namespace: vault-system
#     pod: vault-0
#     command: >-
#       vault operator generate-root -nonce={{ vault_operator_root_nonce }} -otp={{ vault_operator_root_otp }} -decode={{ unseal_keys_b64_1.stdout }} -format=json
#   when: >-
#     vault_operator_root.stdout is defined and
#     vault_operator_init is defined and
#     not vault_operator_root.complete and
#     kubeconfig.stat.exists
#   register: vault_operator_root
# - name: Stat age.key
#   ansible.builtin.stat:
#     path: "{{ home }}/.config/sops/age/keys.txt"
#   register: age_key_file
# - name: Fail if Age Keyfile does not exist
#   ansible.builtin.fail:
#     message: "{{ home }}/.config/sops/age/keys.txt does not exist"
#   when: not age_key_file.stat.exists
# - name: Get Age Public Key
#   ansible.builtin.command: |
#     grep -Po '(?<=public key: ).*' {{ home }}/.config/sops/age/keys.txt
#   register: age_public_key
#   when: age_key_file.stat.exists
#   changed_when: true
# - name: Write Vault Root Generation to File
#   vars:
#     username: "{{ lookup('ansible.builtin.env', 'USER') }}"
#   ansible.builtin.copy:
#     content: "{{ vault_operator_root.stdout }}"
#     dest: "{{ playbook_dir }}/secrets/vault-operator-root-generate.key"
#     mode: preserve
#     owner: "{{ username }}"
#     group: "{{ username }}"
#   when: >-
#     vault_operator_root is defined and
#     not vault_operator_root is skipped and
#     vault_operator_root.complete
# - name: Read Vault Root Token from File
#   ansible.builtin.set_fact:
#     vault_operator_root: "{{ lookup('file', playbook_dir + '/secrets/vault-operator-root-generate.key') }}"
# - name: Write Vault Encrypted Root Token to File
#   become: false
#   community.sops.sops_encrypt:
#     content_json: "{{ vault_operator_root.stdout }}"
#     path: "{{ playbook_dir }}/secrets/vault-operator-root-token.key.enc"
#     age: "{{ age_public_key.stdout }}"
#   when: >-
#     vault_operator_root is defined and
#     vault_operator_init is defined and
#     vault_operator_root.complete
- name: Login to Vault - vault-0
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-0
    command: sh -c "vault login -format=json - < <(echo {{ vault_operator_init.root_token | quote }})"
  when: >-
    vault_operator_init is defined and
    vault_operator_init.root_token != "" and
    kubeconfig.stat.exists
  register: vault_login_0
  # failed_when: (vault_login.stdout | from_json).auth.client_token == ""
- name: Fail if Vault Login Fails - vault-0
  ansible.builtin.fail:
    message: "Vault Login Failed"
  when: (vault_login_0.stdout | from_json).auth.client_token == ""
- name: Login to Vault - vault-1
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: sh -c "vault login -format=json - < <(echo {{ vault_operator_init.root_token | quote }})"
  when: >-
    vault_operator_init is defined and
    vault_operator_init.root_token != "" and
    kubeconfig.stat.exists
  register: vault_login_1
  # failed_when: (vault_login.stdout | from_json).auth.client_token == ""
- name: Fail if Vault Login Fails - vault-1
  ansible.builtin.fail:
    message: "Vault Login Failed"
  when: (vault_login_1.stdout | from_json).auth.client_token == ""
- name: Login to Vault - vault-2
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-2
    command: sh -c "vault login -format=json - < <(echo {{ vault_operator_init.root_token | quote }})"
  when: >-
    vault_operator_init is defined and
    vault_operator_init.root_token != "" and
    kubeconfig.stat.exists
  register: vault_login_2
  # failed_when: (vault_login.stdout | from_json).auth.client_token == ""
- name: Fail if Vault Login Fails - vault-2
  ansible.builtin.fail:
    message: "Vault Login Failed"
  when: (vault_login_2.stdout | from_json).auth.client_token == ""
- name: Create Vault Token Secret
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: vault-token
        namespace: kube-system
      type: opaque
      data:
        token: "{{ vault_operator_init.root_token | b64encode }}"
  when: >-
    kubeconfig.stat.exists and
    vault_operator_init is defined
  changed_when: true
  # failed_when: >-
  #   {{vault_operator_init.root_token | b64encode}} == ""
