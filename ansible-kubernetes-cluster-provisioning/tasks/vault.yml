- name: Check for kubeconfig
  delegate_to: localhost
  run_once: true
  ansible.builtin.stat:
    path: "{{ home }}/.kube/config"
  register: kubeconfig
- name: Stat age.key
  ansible.builtin.stat:
    path: "{{ home }}/.config/sops/age/keys.txt"
  register: age_key_file
- name: Fail if Age Keyfile does not exist
  ansible.builtin.fail:
    message: "{{ home }}/.config/sops/age/keys.txt does not exist"
  when: not age_key_file.stat.exists
- name: Get Age Public Key
  ansible.builtin.command: |
    grep -Po '(?<=public key: ).*' {{ home }}/.config/sops/age/keys.txt
  register: age_public_key
  when: age_key_file.stat.exists
  changed_when: true
- name: Debug Age Public Key
  ansible.builtin.debug:
    msg: "age public key: \"{{ age_public_key }}\""
- name: Add hashicorp repository
  when: kubeconfig.stat.exists
  kubernetes.core.helm_repository:
    kubeconfig: "{{ home }}/.kube/config"
    name: hashicorp
    repo_url: https://helm.releases.hashicorp.com
- name: Add secrets-store-csi repository
  when: kubeconfig.stat.exists
  kubernetes.core.helm_repository:
    kubeconfig: "{{ home }}/.kube/config"
    name: secrets-store-csi-driver
    repo_url: https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
- name: Create vault-system namespace
  when: kubeconfig.stat.exists
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    name: vault-system
    api_version: v1
    kind: Namespace
    state: present
    definition:
      metadata:
        annotations:
          # cni.projectcalico.org/ipv4pools: '["system"]'
          metallb.universe.tf/address-pool: "system"
        labels:
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/audit: privileged
          pod-security.kubernetes.io/warn: privileged
- name: Deploy vault chart
  when: kubeconfig.stat.exists
  kubernetes.core.helm:
    kubeconfig: "{{ home }}/.kube/config"
    name: vault
    release_namespace: vault-system
    # renovate: registryUrl=https://helm.releases.hashicorp.com
    chart_ref: vault
    chart_version: 0.29.1
    chart_repo_url: https://helm.releases.hashicorp.com
    values_files:
      - "{{ playbook_dir }}/helm_values/vault/values.yaml"
- name: Deploy csi-secrets-store chart
  when: kubeconfig.stat.exists
  kubernetes.core.helm:
    kubeconfig: "{{ home }}/.kube/config"
    name: csi-secrets-store
    release_namespace: kube-system
    # renovate: registryUrl=https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
    chart_ref: secrets-store-csi-driver
    chart_version: 1.4.7
    chart_repo_url: https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
    values_files:
      - "{{ playbook_dir }}/helm_values/vault/csivalues.yaml"
- name: Check if Vault Operator Init File Exists
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/secrets/vault-operator-init-secret.key"
  register: vault_operator_init_file
- name: Wait for vault-0 to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ home }}/.kube/config"
    kind: Pod
    namespace: vault-system
    label_selectors:
      - app.kubernetes.io/name = vault
      - apps.kubernetes.io/pod-index = "0"
    wait: true
    wait_condition:
      type: "PodScheduled"
      status: "True"
- name: Wait for vault-1 to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ home }}/.kube/config"
    kind: Pod
    namespace: vault-system
    label_selectors:
      - app.kubernetes.io/name = vault
      - apps.kubernetes.io/pod-index = "1"
    wait: true
    wait_condition:
      type: "PodScheduled"
      status: "True"
- name: Wait for vault-2 to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ home }}/.kube/config"
    kind: Pod
    namespace: vault-system
    label_selectors:
      - app.kubernetes.io/name = vault
      - apps.kubernetes.io/pod-index = "2"
    wait: true
    wait_condition:
      type: "PodScheduled"
      status: "True"
- name: Pause for Vault Stability
  ansible.builtin.pause:
    seconds: 30
- name: Initialize Vault
  # noqa: run-once[task]
  run_once: true
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: vault operator init -format=json -key-shares=2 -key-threshold=2 -pgp-keys="keybase:rumblpak,keybase:rheyser"
    # command: vault operator init
  register: vault_operator_init
  ignore_unreachable: true
  when: >-
    (not vault_operator_init_file.stat.exists) and
    kubeconfig.stat.exists
- name: Pause for Vault Stability
  ansible.builtin.pause:
    seconds: 30
- name: Write Vault Configuration to File
  vars:
    username: "{{ lookup('ansible.builtin.env', 'USER') }}"
  # noqa: run-once[task]
  run_once: true
  ansible.builtin.copy:
    content: "{{ vault_operator_init.stdout }}"
    dest: "{{ playbook_dir }}/secrets/vault-operator-init-secret.key"
    mode: preserve
    owner: "{{ username }}"
    group: "{{ username }}"
  when: >-
    vault_operator_init is defined and
    (not vault_operator_init is skipped)
  register: vault_operator_init_config
- name: Write Vault Configuration to Encrypted File
  # noqa: run-once[task]
  run_once: true
  community.sops.sops_encrypt:
    content_json: "{{ vault_operator_init.stdout }}"
    path: "{{ playbook_dir }}/secrets/vault-operator-init-secret.key.enc"
    age: age_public_key.stdout
  when: >-
    vault_operator_init_config is defined and
    (not vault_operator_init_config is skipped)
- name: Read Vault Configuration from File
  # noqa: run-once[task]
  run_once: true
  become: true
  ansible.builtin.set_fact:
    # vault_operator_init: "lookup('file', {{ playbook_dir }}'/secrets/vault-operator-init-secret.key')"
    vault_operator_init: "{{ lookup('file', playbook_dir + '/secrets/vault-operator-init-secret.key') }}"
  when: vault_operator_init_file.stat.exists
- name: Check Vault Status
  when: kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: vault status -format=json
  register: vault_status
  ignore_unreachable: true
  failed_when: vault_status.rc > 2
- name: Debug
  ansible.builtin.debug:
    msg: "{{ ( vault_operator_init ) }}"
- name: Debug
  ansible.builtin.debug:
    msg: "{{ ( vault_status ) }}"
- name: Unseal Vault 1
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: "vault operator unseal -format=json {{ (vault_operator_init.unseal_keys_b64[0]) }}"
- name: Unseal Vault 2
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: "vault operator unseal -format=json {{ (vault_operator_init.unseal_keys_b64[1]) }}"
- name: Unseal Vault 3
  when: >-
    vault_status.stdout is defined and
    (vault_status.stdout | from_json).sealed and
    kubeconfig.stat.exists
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: "vault operator unseal -format=json {{ (vault_operator_init.unseal_keys_b64[2] }}"
- name: Check Vault Status Again
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: "vault status -format=json"
  register: vault_status_after_unseal
  ignore_unreachable: true
  failed_when: (vault_status_after_unseal | from_json).sealed
  when: >-
    kubeconfig.stat.exists
- name: Check if Vault Operator Root File Exists
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/secrets/vault-operator-root-generate.key"
  register: vault_operator_root_file
- name: Initialize Vault Root Token
  # noqa: run-once[task]
  run_once: true
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: "vault operator generate-root -init -format=json"
  register: vault_operator_root
  ignore_unreachable: true
  when: >-
    not vault_operator_root_file.stat.exists and
    kubeconfig.stat.exists
- name: Write Vault Root Generation to File
  # noqa: run-once[task]
  run_once: true
  ansible.builtin.copy:
    content: vault_operator_root.stdout
    dest: "{{ playbook_dir }}/secrets/vault-operator-root-generate.key"
    mode: preserve
  when: >-
    vault_operator_root is defined and
    not vault_operator_root is skipped
- name: Read Vault Root Token from File
  # noqa: run-once[task]
  run_once: true
  ansible.builtin.set_fact:
    vault_operator_root: "lookup('file', {{ playbook_dir }}'/secrets/vault-operator-root-generate.key')"
  when: vault_operator_root_file.stat.exists
- name: Set Vault Root Token OTP
  # noqa: run-once[task]
  run_once: true
  ansible.builtin.set_fact:
    vault_operator_root_otp: "lookup('file', {{ playbook_dir }}'/secrets/vault-operator-root-generate.key')"
  when: vault_operator_root_file.stat.exists
- name: Generate Root Token 1
  # noqa: run-once[task]
  run_once: true
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: >-
      vault operator generate-root -otp={{ (vault_operator_root_otp.stdout | from_json).otp }} \
        -decode={{ (vault_operator_init.unseal_keys_b64[0] }} -format=json
  when: >-
    vault_operator_root.stdout is defined and
    vault_operator_init.stdout is defined and
    not (vault_operator_root.stdout | from_json).complete and
    kubeconfig.stat.exists
  register: vault_operator_root
- name: Generate Root Token 2
  # noqa: run-once[task]
  run_once: true
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: >-
      vault operator generate-root -otp={{ (vault_operator_root_otp.stdout | from_json).otp }} \
        -decode={{ (vault_operator_init.unseal_keys_b64[1] }} -format=json
  when: >-
    vault_operator_root.stdout is defined and
    vault_operator_init.stdout is defined and
    not (vault_operator_root.stdout | from_json).complete and
    kubeconfig.stat.exists
  register: vault_operator_root
- name: Generate Root Token 3
  # noqa: run-once[task]
  run_once: true
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: >-
      vault operator generate-root -otp={{ (vault_operator_root_otp.stdout | from_json).otp }} \
        -decode={{ (vault_operator_init.stdout | from_json).unseal_keys_b64[2] }} -format=json
  when: >-
    vault_operator_root.stdout is defined and
    vault_operator_init.stdout is defined and
    not (vault_operator_root.stdout | from_json).complete and
    kubeconfig.stat.exists
  register: vault_operator_root
- name: Stat age.key
  ansible.builtin.stat:
    path: "{{ home }}/.config/sops/age/keys.txt"
  register: age_key_file
- name: Fail if Age Keyfile does not exist
  ansible.builtin.fail:
    message: "{{ home }}/.config/sops/age/keys.txt does not exist"
  when: not age_key_file.stat.exists
- name: Get Age Public Key
  ansible.builtin.command: |
    grep -Po '(?<=public key: ).*' {{ home }}/.config/sops/age/keys.txt
  register: age_public_key
  when: age_key_file.stat.exists
  changed_when: true
- name: Write Vault Encrypted Root Token to File
  # noqa: run-once[task]
  run_once: true
  community.sops.sops_encrypt:
    content_json: "{{ vault_operator_root.stdout | to_json }}"
    path: "{{ playbook_dir }}/secrets/vault-operator-root-token.key.enc"
    age: age_public_key.stdout
  when: >-
    vault_operator_root.stdout is defined and
    vault_operator_init.stdout is defined and
    (vault_operator_root.stdout | from_json).complete
- name: Login to Vault
  # noqa: run-once[task]
  run_once: true
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ home }}/.kube/config"
    namespace: vault-system
    pod: vault-1
    command: >-
      vault login -format=json -address=http://vault.vault-system.svc.cluster.local:8200 \
        {{ (vault_operator_init.stdout | from_json).root_token }}
  when: >-
    vault_operator_root.stdout is defined and
    vault_operator_init.stdout is defined and
    (vault_operator_root.stdout | from_json).complete and
    (vault_operator_root.stdout | from_json).encoded_token != "" and
    (vault_operator_init.stdout | from_json).root_token != "" and
    kubeconfig.stat.exists
  register: vault_login
  failed_when: (vault_login.stdout | from_json).auth.client_token == ""
- name: Create Vault Token Secret
  # noqa: run-once[task]
  run_once: true
  kubernetes.core.k8s:
    kubeconfig: "{{ home }}/.kube/config"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: vault-token
        namespace: kube-system
      type: opaque
      data:
        token: "{{ (vault_operator_init.stdout | from_json).root_token | b64encode }}"
  when: >-
    kubeconfig.stat.exists and
    vault_operator_init.stdout is defined
  failed_when: >-
    {{(vault_operator_init.stdout | from_json).root_token | b64encode}} == ""
