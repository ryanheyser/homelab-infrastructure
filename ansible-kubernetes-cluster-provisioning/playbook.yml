---
- name: Ping Hosts
  hosts: all
  tags:
    - ping
  tasks:
    - name: Ping all hosts
      delegate_to: localhost
      delegate_facts: true
      check_mode: false
      ansible.builtin.command: |
        ping -c 2 "{{ inventory_hostname }}"
      become: true
      failed_when: ping_hosts.rc == 1 or ping_hosts.rc > 2
      register: ping_hosts
      changed_when: false

# Load Variables
- name: Load Variables
  hosts: all
  tags:
    - vars
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tasks:
    - name: Stat vars.yml
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/vars.yml"
      register: vars_file
    - name: Load vars
      ansible.builtin.include_vars:
        file: "{{ vars_file.stat.path }}"
      when: vars_file.stat.exists

# Age/Sops
- name: Age/Sops
  hosts: localhost
  tags:
    - setup
    - kubernetes
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tasks:
    - name: Stat age.key
      ansible.builtin.stat:
        path: "{{ home }}/.config/sops/age/keys.txt"
      register: age_key_file
    - name: Fail if Age Keyfile does not exist
      ansible.builtin.fail:
        message: "{{ home }}/.config/sops/age/keys.txt does not exist"
      when: not age_key_file.stat.exists
    - name: Get Age Public Key
      ansible.builtin.command: |
        grep -Po '(?<=public key: ).*' {{ home }}/.config/sops/age/keys.txt
      register: age_public_key
      when: age_key_file.stat.exists
      changed_when: true

# CNI
- name: Configure CNI
  hosts: localhost
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tags:
    - setup
    - kubernetes
    - cni
  tasks:
    - name: Setup | CNI
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/cni.yml"

# Reflector
- name: Reflector
  hosts: localhost
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tags:
    - setup
    - kubernetes
    - reflector
  tasks:
    - name: Setup | Reflector
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/reflector.yml"

# Docker Registry Credentials
- name: Create docker hub registry credential
  hosts: localhost
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tags:
    - setup
    - kubernetes
    - docker
  tasks:
    - name: Setup | Docker
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/docker.yml"

# Metallb
- name: Metallb Install
  hosts: localhost
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tags:
    - setup
    - kubernetes
    - metallb
  tasks:
    - name: Setup | Metallb
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/metallb.yml"

# Traefik
- name: Traefik
  hosts: localhost
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tags:
    - setup
    - kubernetes
    - traefik
  tasks:
    - name: Setup | Traefik
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/traefik.yml"

# Disabled, Looking into alternatives
# # Patch Operator
# - name: Patch Operator | Pre-steps
#   hosts: localhost
#   vars:
#     home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
#   tasks:
#     - name: Check for kubeconfig
#       ansible.builtin.stat:
#         path: "~/.kube/config"
#       register: kubeconfig
#     - name: Add patch operator repository
#       # when: kubeconfig.stat.exists
#       kubernetes.core.helm_repository:
#         kubeconfig: "{{ home }}/.kube/config"
#         name: patch-operator
#         repo_url: https://redhat-cop.github.io/patch-operator
#     - name: Create network-system namespace
#       # when: kubeconfig.stat.exists
#       kubernetes.core.k8s:
#         kubeconfig: "{{ home }}/.kube/config"
#         name: patch-operator-system
#         api_version: v1
#         kind: Namespace
#         state: present
#         definition:
#           annotations:
#             # cni.projectcalico.org/ipv4pools: '["system"]'
# - name: Patch Operator | Install
#   hosts: localhost
#   vars:
#     home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
#   tasks:
#     - name: Deploy Patch Operator chart
#       # when: kubeconfig.stat.exists
#       kubernetes.core.helm:
#         kubeconfig: "{{ home }}/.kube/config"
#         name: patch-operator
#         release_namespace: patch-operator-system
#         # renovate: registryUrl=https://redhat-cop.github.io/patch-operator
#         chart_ref: patch-operator/patch-operator
#         chart_version: v0.1.11
#         chart_repo_url: https://redhat-cop.github.io/patch-operator
#         values:
#           enableMonitoring: false
#     - name: Install Patch ServiceAccount
#       kubernetes.core.k8s:
#         kubeconfig: "{{ home }}/.kube/config"
#         state: "present"
#         definition:
#           apiVersion: v1
#           kind: ServiceAccount
#           metadata:
#             name: patching-service-account
#             namespace: patch-operator-system
#     - name: Install Patch ServiceAccount ClusterRole
#       kubernetes.core.k8s:
#         kubeconfig: "{{ home }}/.kube/config"
#         state: "present"
#         definition:
#           apiVersion: rbac.authorization.k8s.io/v1
#           kind: ClusterRole
#           metadata:
#             name: service-account-modifier
#           rules:
#             - apiGroups: [""]
#               resources: ["serviceaccounts"]
#               verbs: ["get", "watch", "list", "update", "patch"]
#     - name: Install Patch ServiceAccount ClusterRole
#       kubernetes.core.k8s:
#         kubeconfig: "{{ home }}/.kube/config"
#         state: "present"
#         definition:
#           apiVersion: rbac.authorization.k8s.io/v1
#           kind: ClusterRoleBinding
#           metadata:
#             name: service-account-modifier-binding
#           subjects:
#             - kind: ServiceAccount
#               name: patching-service-account
#               namespace: patch-operator-system
#           roleRef:
#             kind: ClusterRole
#             name: service-account-modifier
#             apiGroup: rbac.authorization.k8s.io
#     - name: Wait for patch-operator manifest to complete
#       kubernetes.core.k8s_info:
#         kubeconfig: "{{ home }}/.kube/config"
#         kind: Deployment
#         namespace: patch-operator-system
#         label_selectors:
#           - app.kubernetes.io/instance = patch-operator
#         wait: true
#         wait_condition:
#           type: "Available"
#           status: "True"
#         wait_sleep: 5
#         wait_timeout: 300
#     - name: Install Image Pull Secret Patch
#       kubernetes.core.k8s:
#         kubeconfig: "{{ home }}/.kube/config"
#         state: "present"
#         definition:
#           apiVersion: redhatcop.redhat.io/v1alpha1
#           kind: Patch
#           metadata:
#             name: dockerhub-image-pull-secret-patch
#             namespace: patch-operator-system
#           spec:
#             serviceAccountRef:
#               name: patching-service-account
#             patches:
#               service-account-patch:
#                 targetObjectRef:
#               apiVersion: v1
#               kind: ServiceAccount
#             patchType: application/strategic-merge-patch+json
#             patchTemplate: |
#               imagePullSecrets:
#                 - name: docker-registry-credentials

# Storage
- name: Install Storage Provisioner
  hosts: localhost
  strategy: linear
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tags:
    - setup
    - kubernetes
    - storage
  tasks:
    - name: Setup | Storage
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/storage.yml"

# Vault
- name: Install Vault
  hosts: localhost
  strategy: linear
  tags:
    - setup
    - kubernetes
    - vault
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  tasks:
    - name: Setup | Vault
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/vault.yml"

# External Secrets
- name: Install External Secrets
  hosts: localhost
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
    # kubeconfig: "{{ home }}/.kube/config"
  tags:
    - setup
    - kubernetes
    - secrets
  tasks:
    - name: Setup | External Secrets
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/external-secrets.yml"

# Cert-Manager
- name: Install Cert-Manager
  hosts: localhost
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
    # kubeconfig: "{{ home }}/.kube/config"
  tags:
    - setup
    - kubernetes
    - certificates
  tasks:
    - name: Setup | Cert-Manager
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/cert-manager.yml"

# Flux
- name: Bootstrap Flux
  hosts: localhost
  vars:
    home: "{{ lookup('ansible.builtin.env', 'HOME') }}"
    # kubeconfig: "{{ home }}/.kube/config"
  tags:
    - setup
    - kubernetes
    - flux
  tasks:
    - name: Setup | Flux
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/tasks/flux.yml"
