global:
  namespace: vault-system
  enabled: true
  tlsDisable: true
injector:
  replicas: 3
  logFormat: "json"
  certs:
    secretName: null
  agentImage:
    repository: "hashicorp/vault"
    tag: "1.20.0"
  strategy:
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "25%"
    type: RollingUpdate
  securityContext:
    pod:
      runAsNonRoot: true
      runAsGroup: 3001
      runAsUser: 1000
server:
  uid: 1000
  gid: 3001
  image:
    repository: "hashicorp/vault"
    tag: "1.20.0"
    # Overrides the default Image Pull Policy
    pullPolicy: IfNotPresent
  statefulset:
    securityContext:
      pod:
        runAsNonRoot: true
        runAsGroup: 3001
        runAsUser: 1000
        fsGroup: 3001
        fsGroupChangePolicy: "OnRootMismatch"
        supplementalGroups: [568,911,1000,1001]
      container:
        allowPrivilegeEscalation: false
        runAsGroup: 3001
        runAsUser: 1000
  logLevel: "debug"
  logFormat: "json"
  readinessProbe:
    initialDelaySeconds: 20
  service:
    annotations:
      traefik.ingress.kubernetes.io/service.nativelb: "true"
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: traefik
      traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
      # traefik.ingress.kubernetes.io/router.middlewares: "network-system-authentik@kubernetescrd"
    ingressClassName: traefik
    pathType: Prefix
    hosts:
      - host: vault.homelab.heyser.xyz
      - host: vault-ui.homelab.heyser.xyz
    tls:
      - secretName: vault-homelab-heyser-xyz-tls
        hosts:
          - vault.homelab.heyser.xyz
          - vault-ui.homelab.heyser.xyz
  tolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Exists"
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
    - key: "node-role.kubernetes.io/etcd"
      operator: "Exists"
  volumes:
    - name: pgp-keys
      configMap:
        name: vault-pgp-key
  volumeMounts:
    - name: pgp-keys
      mountPath: /vault/config/pgp-keys
      readOnly: true
  dataStorage:
    enabled: true
    size: 40Gi
    annotations:
      nfs.io/storage-path: "containers/kubernetes/vault/data"
    storageClass: "nfs-dynamic-ss"
    accessMode: ReadWriteMany
  auditStorage:
    enabled: true
    size: 10Gi
    annotations:
      nfs.io/storage-path: "containers/kubernetes/vault/audit"
    storageClass: "nfs-dynamic-ss"
    accessMode: ReadWriteMany
  extraEnvironmentVars:
    VAULT_CLIENT_TIMEOUT: "900s"
  #   VAULT_CACERT: /vault/userconfig/tls-ca/ca.crt
  # extraVolumes:
  #   - type: secret
  #     name: tls-server
  #   - type: secret
  #     name: tls-ca
  # extraInitContainers:
  #   - name: chmod
  #     image: alpine
  #     command: [sh, -c]
  #     args:
  #       - if [[ -f /vault/data/vault.db ]]; then echo "chmod 600 vault.db"; chmod 600 /vault/data/vault.db; fi; if [[ -f /vault/data/raft/raft.db ]]; then echo "chmod 600 raft.db"; chmod 600 /vault/data/raft/raft.db; fi
  #     volumeMounts:
  #       - name: data
  #         mountPath: /vault/data
  #   - name: chown
  #     image: alpine
  #     command: [sh, -c]
  #     args:
  #       - if [[ -d /vault/data/ ]]; then echo "chown vault/data"; chown -R 100:1000 /vault/data/; fi
  #     volumeMounts:
  #       - name: data
  #         mountPath: /vault/data
  standalone:
    enabled: false
  ha:
    enabled: true
    replicas: 3
    # clusterAddr: vault.vault-system.svc.cluster.local
    statefulSet:
      securityContext:
        pod:
          runAsNonRoot: true
          runAsGroup: 3001
          runAsUser: 1000
          fsGroup: 3001
    raft:
      enabled: true
      setNodeId: true
      disruptionBudget:
        enabled: true
        maxUnavailable: 1
      config: |
        ui = true
        disable_mlock = true
        listener "tcp" {
          tls_disable = 1
          address = "0.0.0.0:8200"
          cluster_address = "0.0.0.0:8201"
          # tls_cert_file = "/vault/userconfig/tls-server/fullchain.pem"
          # tls_key_file = "/vault/userconfig/tls-server/server.key"
          # tls_client_ca_file = "/vault/userconfig/tls-server/client-auth-ca.pem"
        }
        disable_sealwrap = true
        storage "raft" {
          path = "/vault/data"
          retry_join {
            auto_join = "provider=k8s label_selector=\"app.kubernetes.io/name = vault,component = server\" namespace=\"{{ .Release.Namespace }}\""
            auto_join_port = 8200
            auto_join_scheme = "http"
          }
          # retry_join {
          #   leader_api_addr = "http://vault-0.vault-internal:8200"
          #   # leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
          #   # leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
          #   # leader_client_key_file = "/vault/userconfig/tls-server/server.key"
          # }
          # retry_join {
          #   leader_api_addr = "http://vault-1.vault-internal:8200"
          #   # leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
          #   # leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
          #   # leader_client_key_file = "/vault/userconfig/tls-server/server.key"
          # }
          # retry_join {
          #   leader_api_addr = "http://vault-2.vault-internal:8200"
          #   # leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
          #   # leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
          #   # leader_client_key_file = "/vault/userconfig/tls-server/server.key"
          # }
        }
        autopilot {
          last_contact_failure_threshold = "15m"
          server_stabilization_time = "30s"
        }
        service_registration "kubernetes" {}
ui:
  enabled: true
csi:
  enabled: true
  daemonSet:
    updateStrategy:
      maxSurge: "25%"
      maxUnavailable: "25%"
    pod:
      runAsNonRoot: true
      runAsGroup: 3001
      runAsUser: 1000
  agent:
    logFormat: json
    image:
      repository: "hashicorp/vault"
      tag: "1.20.0"
      pullPolicy: IfNotPresent

