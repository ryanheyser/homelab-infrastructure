- name: Check docker secrets encrypted file
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ playbook_dir + '/secrets/docker.sops.yaml.enc' }}"
  register: dockersecretsfile
- name: Unencrypt Docker Secrets
  delegate_to: localhost
  ansible.builtin.set_fact:
      docker: "{{ lookup('file', playbook_dir + '/secrets/docker.sops.yaml.enc') | community.sops.decrypt | ansible.builtin.from_yaml }}"
  when: dockersecretsfile.stat.exists
  failed_when: not dockersecretsfile.stat.exists
- name: Disable Service | ufw
  ansible.builtin.systemd_service:
    name: ufw
    state: stopped
    enabled: false
- name: Disable Service | apparmor
  ansible.builtin.systemd_service:
    name: apparmor
    state: stopped
    enabled: false
- name: Reload Services | systemctl daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true
- name: Create kubernetes directory
  become: true
  ansible.builtin.file:
    path: /etc/kubernetes
    state: directory
    mode: '0755'
    owner: root
    group: root
- name: Create rke2 config.d directory
  become: true
  ansible.builtin.file:
    path: /etc/rancher/rke2/config.yaml.d
    state: directory
    mode: '0755'
    owner: root
    group: root
- name: Create KubeletConfig File
  become: true
  ansible.builtin.copy:
    dest: /etc/kubernetes/kubelet-config.yml
    mode: '0644'
    owner: root
    group: root
    content: |
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      syncFrequency: "5m"
      fileCheckFrequency: "1m"
      httpCheckFrequency: "1m"
      imageGCHighThresholdPercent: 75
      imageGCLowThresholdPercent: 60
      clusterDNS: 
      - 10.254.0.10
      cgroupDriver: systemd
      maxPods: 64
      podsPerCore: 32
      address: 0.0.0.0
      readOnlyPort: 10255
      authorization:
        mode: AlwaysAllow
      authentication:
        anonymous:
          enabled: true
- name: Disable Role Etcd
  when: >-
    inventory_hostname in groups['controlnodes'] and
    hostvars[inventory_hostname]['rke2_disable_server_roles'] is contains('etcd')
  ansible.builtin.lineinfile:
    path: /etc/rancher/rke2/config.yaml.d/etcd.yaml
    line: 'disable-etcd: true'
    create: true
- name: Disable Role ApiServer
  when: >-
    inventory_hostname in groups['controlnodes'] and
    hostvars[inventory_hostname]['rke2_disable_server_roles'] is contains('control-plane')
  ansible.builtin.lineinfile:
    path: /etc/rancher/rke2/config.yaml.d/controlplane.yaml
    line: 'disable-apiserver: true'
    create: true
- name: Disable Role Controller Manager
  when: >-
    inventory_hostname in groups['controlnodes'] and
    hostvars[inventory_hostname]['rke2_disable_server_roles'] is contains('control-plane')
  ansible.builtin.lineinfile:
    path: /etc/rancher/rke2/config.yaml.d/controlplane.yaml
    line: 'disable-controller-manager: true'
    create: true
- name: Disable Role Scheduler
  when: >-
    inventory_hostname in groups['controlnodes'] and
    hostvars[inventory_hostname]['rke2_disable_server_roles'] is contains('control-plane')
  ansible.builtin.lineinfile:
    path: /etc/rancher/rke2/config.yaml.d/controlplane.yaml
    line: 'disable-scheduler: true'
    create: true
- name: Mount /var/tmp as executable
  become: true
  ansible.builtin.shell:
    cmd: "mount -o remount,exec /var/tmp"
- name: Check rke2 encrypted file
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ playbook_dir + '/secrets/rke2.sops.yaml.enc' }}"
  register: rke2secretsfile
- name: Unencrypt rke2 Secrets
  delegate_to: localhost
  ansible.builtin.set_fact:
    rke2_server_token: "{{ (lookup('file', playbook_dir + '/secrets/rke2.sops.yaml.enc') | community.sops.decrypt | ansible.builtin.from_yaml).RKE2_SERVER_TOKEN }}"
    # rke2_agent_token: "{{ (lookup('file', playbook_dir + '/secrets/rke2.sops.yaml.enc') | community.sops.decrypt | ansible.builtin.from_yaml).RKE2_AGENT_TOKEN }}"
  when: rke2secretsfile.stat.exists
  failed_when: not rke2secretsfile.stat.exists
- name: Deploy | Install RKE2
  vars:
    # renovate: depName=rancher/rke2
    rke2_version: v1.33.5+rke2r1
    rke2_allow_downgrade: true
    rke2_ha_mode: true
    rke2_interface: ens18
    rke2_api_ip: "10.0.1.10"
    rke2_ha_mode_keepalived: true
    # rke2_bind_address: "{{ ansible_host }}"
    # rke2_bind_address: "10.0.1.5"
    # rke2_bind_address: "0.0.0.0"
    rke2_api_cidr: 18
    rke2_additional_sans:
    - kubernetes.homelab.heyser.xyz
    - 10.0.1.11
    - 10.0.1.12
    - 10.0.1.13
    - 10.0.1.14
    - 10.0.1.15
    - madoo
    - madoo.homelab.heyser.xyz
    - magoo
    - magoo.homelab.heyser.xyz
    - mirra
    - mirra.homelab.heyser.xyz
    - minny
    - minny.homelab.heyser.xyz
    - moggy
    - moggy.homelab.heyser.xyz
    # rke2_cluster_domain: homelab.heyser.xyz
    rke2_download_kubeconf: true
    # rke2_server_node_taints:
    # - "node-role.kubernetes.io/control-plane:NoSchedule"
    # rke2_cni: 'none'
    rke2_token: "{{ rke2_server_token }}"
    rke2_cni:
    - multus
    - calico
    rke2_cluster_cidr:
    - 10.255.0.0/16
    # - fd00:255::/56
    rke2_service_cidr:
    - 10.254.0.0/16
    # - fd00:254::/56
    rke2_node_name: "{{ inventory_hostname }}"
    rke2_cluster_group_name: kubernetes
    rke2_servers_group_name: controlnodes
    rke2_agents_group_name: workernodes
    rke2_download_kubeconf_path: "{{ playbook_dir }}"
    # rke2_cis_profile: "cis"
    # rke2_custom_registry_mirrors:
    # - name: docker.io
    #   endpoint: "{{ registry_hosts }}"
    # - name: index.docker.io
    #   endpoint: "{{ registry_hosts }}"
    # - name: registry-1.docker.io
    #   endpoint: "{{ registry_hosts }}"
    # rke2_custom_registry_configs:
    # - endpoint: docker.io
    #   config:
    #     auth:
    #       username: "{{ (docker | from_yaml).docker_user }}"
    #       password: "{{ (docker | from_yaml).docker_token }}"
    # - endpoint: index.docker.io
    #   config:
    #     auth:
    #       username: "{{ (docker | from_yaml).docker_user }}"
    #       password: "{{ (docker | from_yaml).docker_token }}"
    # - endpoint: registry-1.docker.io
    #   config:
    #     auth:
    #       username: "{{ (docker | from_yaml).docker_user }}"
    #       password: "{{ (docker | from_yaml).docker_token }}"
    # rke2_disable_cloud_controller: true
    rke2_disable:
    - rke2-canal
    - rke2-ingress-nginx
    - rke2-metrics-server
    - rke2-snapshot-controller
    - rke2-snapshot-controller-crd
    - rke2-snapshot-validation-webhook
    rke2_kube_apiserver_args:
    - "--kubelet-timeout=30s"
    - "--request-timeout=5m0s"
    - "--event-ttl=30m0s"
    # - "--advertise-address={{ ansible_host }}"
    rke2_kubelet_arg:
    - "--config=/etc/kubernetes/kubelet-config.yml"
    # rke2_kube_proxy_arg:
    # - "proxy-mode=ipvs"
    # - "ipvs-strict-arp=true"
    rke2_kube_scheduler_arg:
    - "bind-address=0.0.0.0"
    rke2_kube_controller_manager_arg:
    - "bind-address=0.0.0.0"
    rke2_server_options:
    # - "bind-address: {{ ansible_host }}"
    # - "bind-address: 10.0.1.5"
    # - "cloud-provider-name: none"
    # - "disable-cloud-controller: true"
    - "node-ip: {{ ansible_host }}"
    # - "advertise-address: {{ ansible_host }}"
    # - "node-name: {{ inventory_hostname }}"
    # - "node-external-ip: 10.0.1.5"
    - "write-kubeconfig-mode: 0644"
    # - "embedded-registry: true"
    # - "etcd-arg: [ 'name={{ inventory_hostname }}', 'election-timeout=30000', 'heartbeat-interval=5000', 'snapshot-count=25000', 'grpc-keepalive-interval=0', 'grpc-keepalive-timeout=0', 'auth-token-ttl=3600', 'experimental-initial-corrupt-check=true', 'experimental-bootstrap-defrag-threshold-megabytes=256', 'socket-reuse-port=true', 'socket-reuse-address=true' ]"
    - "etcd-arg: [ 'election-timeout=30000', 'heartbeat-interval=5000', 'snapshot-count=25000', 'experimental-initial-corrupt-check=true', 'experimental-bootstrap-defrag-threshold-megabytes=32' ]"
    - "selinux: false"
    - "control-plane-resource-requests: [ 'kube-apiserver-cpu=1000m', 'kube-proxy=500m', 'kube-scheduler-cpu=500m', 'etcd-cpu=3000m', 'etcd-mem=4096Mi' ]"
    # - "node-label: [ 'node-role.kubernetes.io/control-plane=true', 'topology.kubernetes.io/region=us-east-1', 'topology.kubernetes.io/zone=us-east-1a' ]"
    rke2_agent_options:
    - "node-ip: {{ ansible_host }}"
    # - "kubelet-arg: [ '--config=/etc/kubernetes/kubeletconfig.yml' ]"
    # - "node-label: [ 'topology.kubernetes.io/region=us-east-1', 'topology.kubernetes.io/zone=us-east-1a' ]"
  ansible.builtin.import_role:
    name: "lablabs.rke2"
      #when: >-
      #not ((ansible_play_hosts_all | difference(ansible_play_hosts)) | length > 0)
  register: installrke2
# - name: Cleanup | Remove multus-shim if exists
#   ansible.builtin.file:
#     path: "/opt/cni/bin/multus-shim"
#     state: absent
- name: Reload Services | systemctl daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true
- name: Enable Service | cni-dhcp
  ansible.builtin.systemd_service:
    name: cni-dhcp
    state: started
    enabled: true
- name: Mount /var/tmp as non-executable
  become: true
  ansible.builtin.shell:
    cmd: "mount -o remount,noexec /var/tmp"
