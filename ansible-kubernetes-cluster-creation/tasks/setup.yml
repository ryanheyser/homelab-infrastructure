# - name: Setup | apt update
#   ansible.builtin.command: apt update -y
#   become: true
#   changed_when: true
# - name: Setup | apt upgrade
#   ansible.builtin.command: apt upgrade -y
#   become: true
#   changed_when: true
- name: Cleanup | Remove hashicorp apt if exists
  become: true
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/ansible-ubuntu-ansible-noble.sources"
    state: absent
- name: Cleanup | Remove old helm repo configuration if exists
  become: true
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/baltocdn_com_helm_stable_debian.list
  register: old_helm_repo
- name: Cleanup | Remove old helm repo configuration if exists
  become: true
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/baltocdn_com_helm_stable_debian.listpackages_buildkite_com_helm_linux_helm_debian_any.list
  register: old_helm_repo2
- name: Cleanup | Remove old helm repo configuration
  become: true
  ansible.builtin.file:
    path: "{{ old_helm_repo.stat.path }}"
    state: absent
  when: old_helm_repo.stat.exists
- name: Cleanup | Remove old helm repo configuration
  become: true
  ansible.builtin.file:
    path: "{{ old_helm_repo2.stat.path }}"
    state: absent
  when: old_helm_repo2.stat.exists
- name: Setup | Apt Update/Upgrade
  ansible.builtin.apt:
    update_cache: "yes"
    upgrade: "yes"
    autoclean: "yes"
    autoremove: "yes"
    state: "latest"
  changed_when: true
- name: Setup | remove bind9 package
  ansible.builtin.apt:
    state: 'absent'
    pkg:
    - bind9
    purge: true
- name: Setup | install required packages
  ansible.builtin.apt:
    state: 'present'
    update_cache: true
    pkg:
    - age
    # - build-essential
    - curl
    - dnsutils
    - gpg
    - linux-generic
    - linux-headers-generic
    - mtr-tiny
    - net-tools
    - nfs-common
    - open-vm-tools
    - openssl
    - p7zip-full
    - pciutils
    - python3
    - python3-pip
    - python3-venv
    - python3-virtualenv
    - software-properties-common
    - tcpdump
    - vim
    - wget
    - zstd
  become: true
  changed_when: true
- name: Setup | Get Hashicorp GPG
  ansible.builtin.uri:
    url: https://apt.releases.hashicorp.com/gpg
    return_content: true
  register: hashicorpgpg
- name: Setup | Check to see if hashicorp gpg exists
  ansible.builtin.stat:
    path: "/usr/share/keyrings/hashicorp-archive-keyring.gpg"
  register: hashicorp_gpg_file
- name: Setup | Add Hashicorp GPG to system
  become: true
  ansible.builtin.shell: |
    echo "{{ hashicorpgpg.content }}" | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  when: not hashicorp_gpg_file.stat.exists
  changed_when: true
- name: Setup | Add Hashicorp apt source
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com noble main"
    state: present
- name: Setup | Get Helm GPG
  ansible.builtin.shell: |
    curl -fsSL https://packages.buildkite.com/helm-linux/helm-debian/gpgkey
  register: helmgpg
- name: Setup | Check to see if helm gpg exists
  ansible.builtin.stat:
    path: "/usr/share/keyrings/helm.gpg"
  register: helm_gpg_file
- name: Setup | Add Helm GPG to system
  become: true
  ansible.builtin.shell: |
    echo "{{ helmgpg.stdout }}" | sudo gpg --yes --dearmor -o /usr/share/keyrings/helm.gpg
  # when: not helm_gpg_file.stat.exists
  changed_when: true
- name: Setup | Add Helm apt source
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://packages.buildkite.com/helm-linux/helm-debian/any/ any main"
    state: present
# - name: Setup | install ansible ppa
#   ansible.builtin.apt_repository:
#     repo: ppa:ansible/ansible
- name: Setup | install extra packages
  ansible.builtin.apt:
    state: 'present'
    update_cache: true
    pkg:
    - ansible
    - vault
    - helm
  become: true
  changed_when: true
- name: Install sops on localhost
  ansible.builtin.include_role:
    name: community.sops.install
    vars_from: "{{ vars_file.stat.path }}"
  vars:
    sops_install_on_localhost: true
    sops_github_token: "{{ github_token }}"
    sops_become_on_install: true
  when: >-
    not ((ansible_play_hosts_all | difference(ansible_play_hosts)) | length > 0) and vars_file.stat.exists
- name: Install sops
  ansible.builtin.include_role:
    name: community.sops.install
    vars_from: "{{ vars_file.stat.path }}"
  vars:
    sops_github_token: "{{ github_token }}"
    sops_become_on_install: true
  when: >-
    not ((ansible_play_hosts_all | difference(ansible_play_hosts)) | length > 0) and vars_file.stat.exists
- name: Set hostname on remote hosts
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  when: >-
    not ((ansible_play_hosts_all | difference(ansible_play_hosts)) | length > 0)
- name: Check if reboot required
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot_required_file
- name: Reboot if required
  ansible.builtin.reboot:
  when: reboot_required_file.stat.exists
